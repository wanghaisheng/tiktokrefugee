---
// Adapted from Starlight's Theme Select - https://github.com/withastro/starlight/blob/main/packages/starlight/components/ThemeSelect.astro
// MIT License
// Copyright (c) 2023 [Astro contributors](https://github.com/withastro/starlight/graphs/contributors)
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import Select from '@components/TemplateComponents/Select.astro';
import { t } from "i18n:astro";
---

<cs-theme-select>
	<Select
		icon="mdi--laptop"
		label={t('themeSelect.accessibleLabel')}
		value="auto"
		options={[
			{ label: t('themeSelect.dark'), selected: false, value: 'dark' },
			{ label: t('themeSelect.light'), selected: false, value: 'light' },
			{ label: t('themeSelect.auto'), selected: true, value: 'auto' },
		]}
		width="6.25em"
	/>
</cs-theme-select>

<script >
	type Theme = 'auto' | 'dark' | 'light';

	/** Key in `localStorage` to store color theme preference at. */
	const storageKey = 'cs-theme';

	/** Get a typesafe theme string from any JS value (unknown values are coerced to `'auto'`). */
	const parseTheme = (theme: unknown): Theme =>
		theme === 'auto' || theme === 'dark' || theme === 'light' ? theme : 'auto';

	/** Load the user’s preference from `localStorage`. */
	const loadTheme = (): Theme =>
		parseTheme(typeof localStorage !== 'undefined' && localStorage.getItem(storageKey));

	/** Store the user’s preference in `localStorage`. */
	function storeTheme(theme: Theme): void {
		if (typeof localStorage !== 'undefined') {

			localStorage.setItem(storageKey, theme === 'light' || theme === 'dark' ? theme : '');
		}
	}

	/** Get the preferred system color scheme. */
	const getPreferredColorScheme = (): Theme =>
		matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark';

	/** Update select menu UI, document theme, and local storage state. */
	function onThemeChange(theme: Theme): void {
		StarlightThemeProvider.updatePickers(theme);
		storeTheme(theme);
		if (theme === 'auto' ) {
			getPreferredColorScheme() === 'light' ? disableDarkMode() : enableDarkMode();
			storeTheme(theme);
		} else {
			localStorage.getItem('cs-theme') === 'light' ? disableDarkMode() : enableDarkMode();
		}
	}

	// // helper functions to toggle dark mode
	function enableDarkMode() {
	    document.body.classList.add('dark-mode');
	}
	function disableDarkMode() {
	    document.body.classList.remove('dark-mode');
	}

	// React to changes in system color scheme.
	matchMedia(`(prefers-color-scheme: light)`).addEventListener('change', () => {
		onThemeChange('auto');
	});

	class StarlightThemeSelect extends HTMLElement {
		constructor() {
			super();
			onThemeChange(loadTheme());
			this.querySelector('select')?.addEventListener('change', (e) => {
				if (e.currentTarget instanceof HTMLSelectElement) {
					onThemeChange(parseTheme(e.currentTarget.value));
				}
			});
		}
	}
	customElements.define('cs-theme-select', StarlightThemeSelect);
</script>