---
import { render } from 'astro:content';

import { Image } from "astro:assets";
import { formatDate } from "@utils/utils.ts";
import "@styles/markdown.less";

// Receiving incoming props and destructuring them
const { post } = Astro.props;
const { title, date, image, author, imageAlt } = post.data;
const { Content } = await render(post);
---

<article class="blog-article">
    <!--Main Article Image-->
    <Image
        src={image}
        alt={imageAlt}
        width="795"
        height="400"
        class="blog-mainImage"
    />

    <!--Article Info-->
    <div class="article-group">
        <h2 class="blog-h1">{title}</h2>
        <div class="blog-authorGroup">
            <!--Author Image-->
            <picture class="blog-author-img">
                <img
                    src="/assets/svgs/profile.svg"
                    alt="house"
                    width="32"
                    height="32"
                    decoding="async"
                />
            </picture>
            <span class="blog-author">{author}</span>
            <span aria-hidden="true" class="blog-dot"></span>
            <!--Blog Date-->
            <span class="blog-date">{formatDate(date)}</span>
        </div>
    </div>
    <section id="markdown-content">
        <Content />
    </section>
</article>

<style lang="less">
    /* Mobile - 360px */
    @media only screen and (min-width: 0em) {
        .blog-article {
            width: 100%;
            max-width: (795/16em);
            display: block;
            .blog-mainImage {
                width: 100%;
                height: clamp(200px, 30vw, 400px);
                margin-bottom: (50/16em);
                border-radius: (8/16em);
                display: block;
                position: relative;
                overflow: hidden;

                img {
                    width: 100%;
                    height: 100%;
                    object-fit: cover;
                    position: absolute;
                    top: 0;
                    left: 0;
                }
            }

            .blog-author-img {
                width: (32/16em);
                height: (32/16em);
                border-radius: 50%;
                display: block;
                position: relative;
                overflow: hidden;

                img {
                    width: 100%;
                    height: 100%;
                    object-fit: cover;
                    position: absolute;
                    top: 0;
                    left: 0;
                }
            }

            .blog-authorGroup {
                display: flex;
                justify-content: flex-start;
                align-items: center;
                gap: (12/16rem);
            }

            .blog-author,
            .blog-date {
                font-size: (14/16rem);
                line-height: 1.5em;
                color: var(--bodyTextColor);
            }

            .blog-dot {
                width: 3px;
                height: 3px;
                background-color: #fe4f70;
                border-radius: 50%;
                display: block;
            }

            .blog-h1 {
                font-size: clamp(20px, 5vw, 39px);
                font-weight: 700;
                line-height: 1.4em;
                max-width: (550/16rem);
                margin: (16/16rem) 0;
                color: var(--headerColor);
            }
        }
    }

    /* Dark Mode */
    body.dark-mode {
        .recent-articles {
            .blog-h1,
            .blog-desc,
            .blog-author,
            .blog-date {
                color: var(--light);
            }
        }

        .blog-sidebar {
            .feature-h3,
            .feature-date,
            .blog-header {
                color: var(--light);
            }

            .blog-header {
                &:after {
                    background: var(--primary);
                }
            }
        }

        .blog-article {
            .blog-h1,
            .blog-author,
            .blog-date {
                color: var(--light);
            }
        }
    }
</style>
